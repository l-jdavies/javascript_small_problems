/* The Fibonacci sequence, as you know, is generated by iterative addition of the sum of the last two elements of the sequence to the end of the sequence, starting with [0, 1].

Fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …]
The iccanobiF sequence (see Resources tab for more info) is generated in a similar way — except that the digits of the last two elements should first be reversed, then added together, then added to the sequence. Single-digit numbers are unaffected, so the first 8 elements are identical to the Fibonacci sequence:

iccanobiF = [0, 1, 1, 2, 3, 5, 8, 13]
The next element is the sum of the reverse of 8 (still 8), and the reverse of 13 — 31 (8 + 31 = 39).

iccanobiF = [0, 1, 1, 2, 3, 5, 8, 13, 39]
The next element is 31 + 93 = 124

iccanobiF = [0, 1, 1, 2, 3, 5, 8, 13, 39, 124]
And so on.

Create a function that takes a number n and returns the difference between the nth iccanobiF number and the nth Fibonacci number. */


// PEDAC 
//
function standardFibonacci(num) {
  let fibonacciArray = [0, 1, 1];
  let tempNum;

  while (fibonacciArray.length < num) {
    tempNum = fibonacciArray[fibonacciArray.length - 2] + fibonacciArray[fibonacciArray.length - 1]
    fibonacciArray.push(tempNum);
  }
  return fibonacciArray[fibonacciArray.length - 1];
}

function iccanobiF(num) {
  let fibonacciArray = [0, 1, 1];
  let tempNum;
  let reversedNum1;
  let reversedNum2;

  while (fibonacciArray.length < num) {
    reversedNum1 = fibonacciArray[fibonacciArray.length - 2]
    reversedNum2 = fibonacciArray[fibonacciArray.length - 1]

    reversedNum1 = reversedNum1 > 9 ? reverseNumber(reversedNum1) : reversedNum1;
    reversedNum2 = reversedNum2 > 9 ? reverseNumber(reversedNum2) : reversedNum2;

    tempNum = reversedNum1 + reversedNum2;
    fibonacciArray.push(tempNum);
  }
  return fibonacciArray[fibonacciArray.length - 1];
}

function reverseNumber(num) {
  numRev = num.toString(10).split('').reverse().join('');
  return Number(numRev);
}

function iccMinusFib(num) {
  return iccanobiF(num) - standardFibonacci(num);
}

iccMinusFib(9) //➞ 18
